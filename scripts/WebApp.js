/**
 * Receives HTTP POST request and routes to doGet()
 * @param {request} e - The request object generated by Google
*/
function doPost(e) {
  return doGet(e)
}


/**
 * Recieves HTTP GET request. After loading the configuration, the request is
 * dispatched to doStandup()
 * @param {request} e - The request object generated by Google
*/
function doGet(e) {
  init_config();
  return doStandup(e);
}


/**
 * HTTP Action handler for logging standup to Google Doc in Drive.
 * @param {request} e - The request object generated by Google
*/
function doStandup(e) {
  // Verify that API token is correct
  if (e.parameters["token"] != PROPS["token"])
    throw "ERROR: Authentication error. Bad token";

  // Pull out the message
  var text = e.parameters["text"];
  if (text == undefined)
    throw "ERROR: Missing parameter text";

  // Pull out the User ID
  var user_id = e.parameters["user_id"];
  if (user_id == undefined)
    throw "ERROR: Missing parameter user_id";

  // Resolve who the user is
  var user = User.findById(user_id);
  if (user == undefined) {
    Logger.log("Unkown user. Recording in datasource." + e);
    user = new User();
    user.user_id = user_id;
    user.full_name = e.parameters["user_name"];
    user.user_name = e.parameters["user_name"];
    user.save();
  }

  // Write Standup
  Logger.log("RECEIVED: " + user.full_name + ": " + text);
  writeMessage(user, text);
  user.markActive();
  return ContentService.createTextOutput("Standup logged successfully.");
}


/**
 * Logs a users message to the current Google Doc with the user stamp attached
 * @param {User} user - Slack user who posted in Slack
 * @param {string} message - Text posted by the user in Slack
*/
function writeMessage(user, message) {
  var file = getCurrentDoc();
  var body = DocumentApp.openById(file.getId()).getBody();
  body.appendParagraph(user.full_name + ": " + message + "\n");
}


/**
 * Searches for the current Google Doc file based to todays date. If the file
 * cannot be found, one is generated.
*/
function getCurrentDoc() {
  var sheet_id = SpreadsheetApp.getActiveSpreadsheet().getId();
  var parentFolderFind = DriveApp.getFileById(sheet_id).getParents();
  var parentFolderId = parentFolderFind.next().getId();

  // Get folder by id
  var parentFolder = DriveApp.getFolderById(parentFolderId);

  // Search for file
  var files = parentFolder.getFilesByName(todaysFileName());

  while (files.hasNext()) {
    return files.next();
  }
  return createNewFile(parentFolder, todaysFileName());
}


/**
* Generate todays file name (ex. 2017-04-28)
*/
function todaysFileName() {
  return Utilities.formatDate(new Date(), "CST", "yyyy-MM-dd");
}


/**
 * Creates a new Google Doc file
 * @param {Folder} parentFolder - Directory in which to place the new file
 * @param {string} filename - New file's name
*/
function createNewFile(parentFolder, filename) {
  doc = DocumentApp.create(filename);
  file = DriveApp.getFileById(doc.getId());

  // Move file from old folder to new
  sourceFolder = file.getParents().next();
  parentFolder.addFile(file);
  sourceFolder.removeFile(file);

  formatNewDocument(doc);

  return file;
}


/**
 * Takes a document and applies the appropriate styling to it.
 * @todo Function is not implemented yet. Despite being referenced, it does nothing to the document yet
*/
function formatNewDocument(doc) {
  return
}
